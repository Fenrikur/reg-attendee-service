openapi: 3.0.3
info:
  title: Attendee Service
  description: |-
    This backend microservice manages attendee registrations. This includes    
    - creating and editing registrations
    - adding and removing packages incl. calculating total due amount (but not current dues)
    - searching and listing registrations (admin only)
    - registration status progression (new - approved - partially paid - paid - checked in / waiting / cancelled / deleted)
    - ban detection and management
    - transferring registrations when re-sold
  license:
    name: MIT
    url: https://github.com/eurofurence/reg-attendee-service/blob/main/LICENSE
  version: 0.1.0
servers:
  - url: /api/rest/v1
    description: localhost
  - url: /attsrv/api/rest/v1
    description: server
tags:
  - name: registration
    description: Register and change attendees
  - name: status
    description: Status progression
  - name: privileged
    description: Privileged (admin only) functionality
  - name: info
    description: Health and other public status information
paths:
  /attendees:
    post:
      tags:
        - registration
      summary: Add a new attendee
      description: |-
        Register a new attendee and assign them a badge number. 
        
        The attendee will initially be in status new and the privileged information is set to all defaults.
      operationId: addAttendee
      requestBody:
        description: Create a new attendee
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendee'
        required: true
      responses:
        '201':
          description: Successfully created
          headers:
            Location:
              schema:
                type: string
              description: URL of the created resource, ending in the assigned Badge number.
        '400':
          description: Invalid input or registration not yet open (if you authenticate as staff, you may be allowed to register earlier)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required (can only occur if service is configured to require Authorization for all new registrations)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: duplicate (same nickname + email + zip code)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /attendees/{id}:
    get:
      tags:
        - registration
      summary: Find attendee by id
      description: Returns a single attendee
      operationId: getAttendeeById
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to return
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendee'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    put:
      tags:
        - registration
      summary: Update an existing attendee
      description: Update an existing attendee by Id
      operationId: updateAttendee
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to update
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendee'
        required: true
      responses:
        '200':
          description: Successful operation
          headers:
            Location:
              schema:
                type: string
              description: URL of the resource, ending in the assigned Badge number.
        '400':
          description: Invalid ID supplied or invalid data in request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to change this attendee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: your changes would turn this attendee into a duplicate (same nickname + email + zip code)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: The update leads to an update in the payment service which failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /attendees/{id}/admin:
    get:
      tags:
        - privileged
      summary: obtain privileged information about an attendee
      description: Returns admin info about a single attendee
      operationId: getAdminInfoById
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to return
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminInfo'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    put:
      tags:
        - privileged
      summary: Update privileged information for an existing attendee
      description: Update privileged information for an attendee by Id. Note that there is no creation endpoint for this subresource, because a default set of values is always created when the attendee is created.
      operationId: updateAdminInfo
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to update
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminInfo'
        required: true
      responses:
        '204':
          description: Successful operation
        '400':
          description: Invalid ID supplied or invalid data in request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to change privileged information for this attendee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /attendees/{id}/status:
    get:
      tags:
        - status
      summary: obtain the current status of an attendee
      description: Returns the current status of a single attendee. Note that this endpoint is also available to regular logged in users, this is why you only get the status field, not the full status change information. Request status history to get full information (privileged).
      operationId: getStatusById
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to return
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusOnly'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
    post:
      tags:
        - status
      summary: request a status change
      description: |-
        Attempt a status change for a single attendee.        
        
        Depending on the transition, this may be available to a normal logged in user or admin only.
        
        - new 
          - from: approved, partially paid, paid, checked in, cancelled: admin only
        - approved
          - from: new, cancelled, partially paid, paid: admin only
        - partially paid
          - from: approved, paid, cancelled: admin only - the payment service access counts as admin
        - paid
          - from: approved, partially paid, cancelled: admin only - the payment service access counts as admin
        - checked in
          - from: paid: regdesk permission or admin
        - cancelled
          - from: new, approved: self or admin
          - from: partially paid, paid, checked in: admin
        - deleted
          - from: new, approved: admin (not possible if any payments were made for tax reasons)
        
        Note that there may also be situational limitations, such as you cannot check in an attendee unless paid in full.
        These conditions result in a 409 status to distinguish them from situations where the transition is 
        unavailable to the requesting user for permission reasons, which gives a 403.

        For detailed documentation of what the status values mean, see under Schemas/Status below.
      operationId: changeStatus
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to return
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      requestBody:
        description: The status change with an optional comment for the reason. Note, the timestamp will be ignored.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChange'
        required: true
      responses:
        '204':
          description: successful operation
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee, or you do not have permission to perform this status change at all. Note that situational limitations (e.g. cannot check in an unpaid attendee) result in 409 instead. If you get 403, you do not have permissions for this status transition, ever.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: The current situation does not allow this status change, even though you generally have permission to do it. Maybe you are trying to check in an attendee who hasn't fully paid, etc. See message and details fields of the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: The update leads to an update in the payment service which failed, or the mail service failed to send an email as part of the update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /attendees/{id}/status-history:
    get:
      tags:
        - status
      summary: obtain the history of status changes of an attendee
      description: Returns the status history of a single attendee
      operationId: getStatusHistoryById
      parameters:
        - name: id
          in: path
          description: Badge number of attendee to return
          required: true
          schema:
            type: integer
            minimum: 1
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusHistory'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authorization required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: You do not have permission to see this attendee, or you do not have privileges to see status history.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred. This includes database errors. A best effort attempt is made to return details in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BearerAuth: []
        - ApiKeyAuth: []
  /countdown:
    get:
      tags:
        - info
      summary: registration countdown
      description: Returns the countdown status
      operationId: countdown
      parameters:
        - name: currentTime
          in: query
          description: Testing override for the current time. Used in end to end tests for the frontend. Not useful in production because the attendee endpoints also check the countdown.
          schema:
            type: string
            format: date-time
            example: 2006-01-02T15:04:05-07:00
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Countdown'
components:
  schemas:
    Attendee:
      type: object
      required:
        - nickname
        - first_name
        - last_name
        - street
        - zip
        - city
        - country
        - country_badge
        - email
        - phone
        - birthday
        - packages
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: This badge number is automatically assigned during initial registration. Optional for request bodies, but if specified it must match. It is not possible to change your badge number.
          example: 10
        nickname:
          type: string
          minLength: 1
          maxLength: 80
          description: The nickname you would like to be known under. Must contain at least on alphanumeric character, and may not contain more than two non-alphanumeric characters (not counting spaces)
          example: FluffyCheetah
        first_name:
          type: string
          minLength: 1
          maxLength: 80
          description: Your first name. Cannot be empty.
          example: John
        last_name:
          type: string
          minLength: 1
          maxLength: 80
          description: Your last name. Cannot be empty.
          example: Doe
        street:
          type: string
          minLength: 1
          maxLength: 120
          description: Your street address, including number
          example: Teststraße 24
        zip:
          type: string
          minLength: 1
          maxLength: 20
          description: Your postal / zip code
          example: 13591
        city:
          type: string
          minLength: 1
          maxLength: 80
          description: Your city
          example: Berlin
        country:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 letter ISO-3166-1 country code for the address (Alpha-2 code), for example DE for Germany. Internally validated against a list from configuration.
          example: DE
        country_badge:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 letter ISO-3166-1 country code for printing on Badge (Alpha-2 code). This allows non-German speaking attendees to select UK here and get a UK flag on their badge, even though they currently live in Germany. Essentially, prevents getting spoken to in a language you do not speak.
          example: DE
        state:
          type: string
          maxLength: 80
          description: Your state (optional)
          example: Bavaria
        email:
          type: string
          description: Your email address. If a non-admin changes the email address and an identity provider is in use, must match the email address of your account, because then we can skip email verification. This means you must first change your email in the idp, then change it here, or the change will be rejected.
          example: email@mailinator.com
        phone:
          type: string
          description: Your phone number
          example: +1 500 0000 000
        telegram:
          type: string
          description: Your telegram handle (optional), but has turned out tremendously useful during the convention. Supply complete handle including the @ character, or leave blank if you do not have one or don't wish to provide it.
        birthday:
          type: string
          format: date
          description: Your date of birth, in ISO date format (yyyy-mm-dd)
          example: 1980-08-20
        gender:
          type: string
          enum:
            - notprovided
            - male
            - female
            - other
          default: notprovided
          description: Your gender (optional). Collected for statistical purposes only. Conventions are at liberty to hide this field in the UI altogether, in which case all attendees will have it set to "notprovided".
        pronouns:
          type: string
          maxLength: 40
          description: Your preferred pronouns (optional).
          example: they/them
        tshirt_size:
          type: string
          description: Your t-shirt size (optional). Validated against a list from configuration if specified.
          example: XXL
        flags:
          type: string
          description: A comma separated list of flags as declared in configuration. Flags are used to store yes/no-style information about an attendee, and displayed as checkboxes. Flags can be configured with respect to their visibility and who may change them (admin only, normal user). Flags are used to represent properties of the attendee, such as "is staff", "does not wish their name to appear in the convention booklet", etc.
          example: anon,ev
        options:
          type: string
          description: A comma separated list of options as declared in configuration. Options are used to store yes/no-style choices an attendee makes that do not cost money, and displayed as checkboxes. With Options, you cannot control the visibility in the configuration, as they are basically options given to the attendee that do not cost money. Use these for "I wish to receive emails about x subject" or "I am a fursuiter" etc.
          example: art,anim,music,suit
        packages:
          type: string
          description: A comma separated list of packages as declared in configuration. Packages are the things that cost money, like being a supersponsor or a day guest for a certain day. They can be configured with respect to who may add / remove them, if they are on by default, and whether they are visible if not selected (admin only, normal user, completely disabled). There is also configuration as to which packages are mutually exclusive, such as sponsor and supersponsor.
          example: room-none,attendance,sponsor
        user_comments:
          type: string
          description: Optional comments the attendee wishes to make regarding their registration. Not processed in any way.
          example: I love eurofurence
    AdminInfo:
      type: object
      required:
        - flags
        - admin_comments
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: This badge number is automatically assigned during initial registration (when creating an attendee). Optional for request bodies, but if specified it must match. It is not possible to change your badge number.
          example: 10
        flags:
          type: string
          description: |-
            A comma separated list of admin-only flags as declared in configuration, but only those that are not even _visible_ to a normal user. This is a separate field in order to avoid having resources change depending on your permissions, as that may lead to strange behaviour.  
            
            Flags are used to store yes/no-style information about an attendee, and displayed as checkboxes. Flags can be configured with respect to their visibility and who may change them (admin only, normal user). Flags are used to represent properties of the attendee, such as "is staff", "does not wish their name to appear in the convention booklet", etc.
          example: banflagged,security
        permissions:
          type: string
          description: |-
            A comma separated list of permissions that control extended permission in the registration system, where not governed by roles in the token.
            
            In the long term, we will probably migrate away from this, but at the moment, they are needed so regsys classic can continue to function.
          example: read_all,bans,announcements
        admin_comments:
          type: string
          description: Optional comments only visible to admins. Not processed in any way.
    Countdown:
      type: object
      required:
        - currentTime
        - targetTime
        - countdown
      properties:
        currentTime:
          type: string
          format: date-time
          description: The current time on the server
          example: 2006-01-02T15:04:05+07:00
        targetTime:
          type: string
          format: date-time
          description: The time at which the countdown ends (may depend on authorization, e.g. staff may register earlier than normal users)
          example: 2006-01-02T15:04:05+07:00
        countdown:
          type: integer
          format: int64
          description: The number of seconds until the countdown ends (may depend on authorization, e.g. staff may register earlier than normal users). Stays at 0 if the countdown is over.
          example: 12648
    StatusOnly:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - new
            - approved
            - partially paid
            - paid
            - checked in
            - cancelled
            - deleted
            - waiting
          description: the status, detailed descriptions of the values see below under Schemas/Status (how do I reference this in OpenApi?)
    StatusChange:
      type: object
      required:
        - status
      properties:
        timestamp:
          type: string
          format: date-time
          description: The time at which the status change occurred. Ignored when you send us a status change and replaced with the current server time. Always present when we return a status change entry to you.
          example: 2006-01-02T15:04:05+07:00
        status:
          type: string
          enum:
            - new
            - approved
            - partially paid
            - paid
            - checked in
            - cancelled
            - deleted
            - waiting
          description: the status, detailed descriptions of the values see below under Schemas/Status (how do I reference this in OpenApi?)
        comment:
          type: string
          maxLength: 256
          description: The reason for the status change, e.g. cancel reason, or any other comment
          example: cancelled by own request
    StatusHistory:
      type: object
      required:
        - status_history
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: This badge number is automatically assigned during initial registration (when creating an attendee). Informational only.
          example: 10
        status_history:
          type: array
          items:
            type: object
            properties:
              schema:
                $ref: '#/components/schemas/StatusChange'
    Status:
      type: string
      enum:
        - new
        - approved
        - partially paid
        - paid
        - checked in
        - cancelled
        - deleted
        - waiting
      description: |-
        Status of an attendee. The values mean:
        
        - new: the attendee is pending approval, e.g. because of a ban check positive, no dues are assigned         
        - approved: the attendee has been automatically or manually approved, and dues are assigned
        - partially paid: the attendee has made payments, but they do not cover enough of the dues
        - paid: the attendee has paid enough of the dues
        - checked in: the attendee has arrived at the convention and received their badge
        - cancelled: the registration is no longer current, depending on when the cancellation occurs, a refund may be available
        - deleted: the registration was made in error, has invalid data, or the attendee requested to have their data deleted - only possible if no payments exist
        - waiting: the attendee has been placed on the waiting list. This may occur if the convention has a limited number of places.
        
        For a detailed description of available status transitions and who may do them see the documentation of the 
        "request a status change" POST endpoint.
    Error:
      type: object
      required:
        - message
        - timestamp
        - requestid
      properties:
        timestamp:
          type: string
          format: date-time
          description: The time at which the error occurred.
          example: 2006-01-02T15:04:05+07:00
        requestid:
          type: string
          description: An internal trace id assigned to the error. Used to find logs associated with errors across our services. Display to the user as something to communicate to us with inquiries about the error.
          example: a8b7c6d5
        messsage:
          type: string
          description: |-
            A keyed description of the error. We do not write human readable text here because the user interface will be multi language.
            
            At this time, there are these values:
            - attendee.max_id.error (database error or overload)
            - attendee.parse.error (json body parse error)
            - attendee.data.invalid (field data failed to validate, see details for more information)
            - attendee.data.duplicate (duplicate registration - nickname + email + zip)
            - attendee.write.error (database error)
            - attendee.payment.error (payment service failure while updating attendee)
            - attendee.id.notfound (no such badge number in the database)
            - attendee.id.invalid (syntactically invalid badge number, must be positive integer)
            - admin.read.error (database error)
            - admin.write.error (database error)
            - admin.parse.error (json body parse error)
            - admin.data.invalid (field data failed to validate, see details for more information)
            - auth.unauthorized (token missing completely or invalid)
            - auth.forbidden (permissions missing)
            - status.read.error (database error)
            - status.write.error (database error)
            - status.mail.error (mail service failure while doing status change)
            - status.payment.error (payment service failure while doing status change)
            - status.parse.error (json body parse error)
            - status.unchanged.invalid (not actually a status change)
            - status.data.invalid (field data failed to validate, see details for more information)            
            - status.unpaid.dues (this status change is blocked because there are outstanding payments)
            - status.has.paid (this status change is impossible because there is a nonzero payment balance) 
            - status.cannot.delete (deletion is not possible, e.g. there are payments, or an invoice was issued and tax law says we have to store this data for 10 years)
            - status.use.approved (you tried to go directly to partially paid, paid, or checked in from new, cancelled, deleted - please use approved, this will automatically set (partially) paid as appropriate)
          example: attendee.data.invalid
        details:
          type: array
          items:
            type: string
          description: Optional list of additional details about the error. If available, will usually contain English language technobabble.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: A bearer or session token obtained from the auth service (which may integrate an OIDC identity provider)
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key
      description: A shared secret used for local communication (also useful for local development)
